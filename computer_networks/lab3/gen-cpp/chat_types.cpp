/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "chat_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace chat {


TimeStamp::~TimeStamp() throw() {
}


void TimeStamp::__set_seconds(const int64_t val) {
  this->seconds = val;
}

void TimeStamp::__set_milliseconds(const int64_t val) {
  this->milliseconds = val;
}

uint32_t TimeStamp::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->seconds);
          this->__isset.seconds = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->milliseconds);
          this->__isset.milliseconds = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TimeStamp::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TimeStamp");

  xfer += oprot->writeFieldBegin("seconds", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->seconds);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("milliseconds", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->milliseconds);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TimeStamp &a, TimeStamp &b) {
  using ::std::swap;
  swap(a.seconds, b.seconds);
  swap(a.milliseconds, b.milliseconds);
  swap(a.__isset, b.__isset);
}

TimeStamp::TimeStamp(const TimeStamp& other0) {
  seconds = other0.seconds;
  milliseconds = other0.milliseconds;
  __isset = other0.__isset;
}
TimeStamp& TimeStamp::operator=(const TimeStamp& other1) {
  seconds = other1.seconds;
  milliseconds = other1.milliseconds;
  __isset = other1.__isset;
  return *this;
}
void TimeStamp::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TimeStamp(";
  out << "seconds=" << to_string(seconds);
  out << ", " << "milliseconds=" << to_string(milliseconds);
  out << ")";
}


Message::~Message() throw() {
}


void Message::__set_timestamp(const TimeStamp& val) {
  this->timestamp = val;
}

void Message::__set_login(const std::string& val) {
  this->login = val;
}

void Message::__set_message(const std::string& val) {
  this->message = val;
}

uint32_t Message::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->timestamp.read(iprot);
          this->__isset.timestamp = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->login);
          this->__isset.login = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->message);
          this->__isset.message = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Message::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("Message");

  xfer += oprot->writeFieldBegin("timestamp", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->timestamp.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("login", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->login);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("message", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->message);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Message &a, Message &b) {
  using ::std::swap;
  swap(a.timestamp, b.timestamp);
  swap(a.login, b.login);
  swap(a.message, b.message);
  swap(a.__isset, b.__isset);
}

Message::Message(const Message& other2) {
  timestamp = other2.timestamp;
  login = other2.login;
  message = other2.message;
  __isset = other2.__isset;
}
Message& Message::operator=(const Message& other3) {
  timestamp = other3.timestamp;
  login = other3.login;
  message = other3.message;
  __isset = other3.__isset;
  return *this;
}
void Message::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Message(";
  out << "timestamp=" << to_string(timestamp);
  out << ", " << "login=" << to_string(login);
  out << ", " << "message=" << to_string(message);
  out << ")";
}


InvalidLogin::~InvalidLogin() throw() {
}


void InvalidLogin::__set_reason(const std::string& val) {
  this->reason = val;
}

uint32_t InvalidLogin::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->reason);
          this->__isset.reason = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t InvalidLogin::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("InvalidLogin");

  xfer += oprot->writeFieldBegin("reason", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->reason);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(InvalidLogin &a, InvalidLogin &b) {
  using ::std::swap;
  swap(a.reason, b.reason);
  swap(a.__isset, b.__isset);
}

InvalidLogin::InvalidLogin(const InvalidLogin& other4) : TException() {
  reason = other4.reason;
  __isset = other4.__isset;
}
InvalidLogin& InvalidLogin::operator=(const InvalidLogin& other5) {
  reason = other5.reason;
  __isset = other5.__isset;
  return *this;
}
void InvalidLogin::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "InvalidLogin(";
  out << "reason=" << to_string(reason);
  out << ")";
}

const char* InvalidLogin::what() const throw() {
  try {
    std::stringstream ss;
    ss << "TException - service has thrown: " << *this;
    this->thriftTExceptionMessageHolder_ = ss.str();
    return this->thriftTExceptionMessageHolder_.c_str();
  } catch (const std::exception&) {
    return "TException - service has thrown: InvalidLogin";
  }
}


IsNotAuthorized::~IsNotAuthorized() throw() {
}


uint32_t IsNotAuthorized::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    xfer += iprot->skip(ftype);
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t IsNotAuthorized::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("IsNotAuthorized");

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(IsNotAuthorized &a, IsNotAuthorized &b) {
  using ::std::swap;
  (void) a;
  (void) b;
}

IsNotAuthorized::IsNotAuthorized(const IsNotAuthorized& other6) : TException() {
  (void) other6;
}
IsNotAuthorized& IsNotAuthorized::operator=(const IsNotAuthorized& other7) {
  (void) other7;
  return *this;
}
void IsNotAuthorized::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "IsNotAuthorized(";
  out << ")";
}

const char* IsNotAuthorized::what() const throw() {
  try {
    std::stringstream ss;
    ss << "TException - service has thrown: " << *this;
    this->thriftTExceptionMessageHolder_ = ss.str();
    return this->thriftTExceptionMessageHolder_.c_str();
  } catch (const std::exception&) {
    return "TException - service has thrown: IsNotAuthorized";
  }
}

} // namespace
