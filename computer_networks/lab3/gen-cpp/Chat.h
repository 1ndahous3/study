/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef Chat_H
#define Chat_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "chat_types.h"

namespace chat {

#ifdef _WIN32
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class ChatIf {
 public:
  virtual ~ChatIf() {}
  virtual void login(const std::string& name) = 0;
  virtual void broadcast(const std::string& login, const std::string& text) = 0;
  virtual void users_list(std::set<std::string> & _return, const std::string& login) = 0;
  virtual void get_messages(std::vector<Message> & _return, const std::string& login, const TimeStamp& timestamp) = 0;
  virtual void disconnect(const std::string& login) = 0;
};

class ChatIfFactory {
 public:
  typedef ChatIf Handler;

  virtual ~ChatIfFactory() {}

  virtual ChatIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(ChatIf* /* handler */) = 0;
};

class ChatIfSingletonFactory : virtual public ChatIfFactory {
 public:
  ChatIfSingletonFactory(const boost::shared_ptr<ChatIf>& iface) : iface_(iface) {}
  virtual ~ChatIfSingletonFactory() {}

  virtual ChatIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(ChatIf* /* handler */) {}

 protected:
  boost::shared_ptr<ChatIf> iface_;
};

class ChatNull : virtual public ChatIf {
 public:
  virtual ~ChatNull() {}
  void login(const std::string& /* name */) {
    return;
  }
  void broadcast(const std::string& /* login */, const std::string& /* text */) {
    return;
  }
  void users_list(std::set<std::string> & /* _return */, const std::string& /* login */) {
    return;
  }
  void get_messages(std::vector<Message> & /* _return */, const std::string& /* login */, const TimeStamp& /* timestamp */) {
    return;
  }
  void disconnect(const std::string& /* login */) {
    return;
  }
};

typedef struct _Chat_login_args__isset {
  _Chat_login_args__isset() : name(false) {}
  bool name :1;
} _Chat_login_args__isset;

class Chat_login_args {
 public:

  Chat_login_args(const Chat_login_args&);
  Chat_login_args& operator=(const Chat_login_args&);
  Chat_login_args() : name() {
  }

  virtual ~Chat_login_args() throw();
  std::string name;

  _Chat_login_args__isset __isset;

  void __set_name(const std::string& val);

  bool operator == (const Chat_login_args & rhs) const
  {
    if (!(name == rhs.name))
      return false;
    return true;
  }
  bool operator != (const Chat_login_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Chat_login_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Chat_login_pargs {
 public:


  virtual ~Chat_login_pargs() throw();
  const std::string* name;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Chat_login_result__isset {
  _Chat_login_result__isset() : ex(false) {}
  bool ex :1;
} _Chat_login_result__isset;

class Chat_login_result {
 public:

  Chat_login_result(const Chat_login_result&);
  Chat_login_result& operator=(const Chat_login_result&);
  Chat_login_result() {
  }

  virtual ~Chat_login_result() throw();
  InvalidLogin ex;

  _Chat_login_result__isset __isset;

  void __set_ex(const InvalidLogin& val);

  bool operator == (const Chat_login_result & rhs) const
  {
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const Chat_login_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Chat_login_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Chat_login_presult__isset {
  _Chat_login_presult__isset() : ex(false) {}
  bool ex :1;
} _Chat_login_presult__isset;

class Chat_login_presult {
 public:


  virtual ~Chat_login_presult() throw();
  InvalidLogin ex;

  _Chat_login_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Chat_broadcast_args__isset {
  _Chat_broadcast_args__isset() : login(false), text(false) {}
  bool login :1;
  bool text :1;
} _Chat_broadcast_args__isset;

class Chat_broadcast_args {
 public:

  Chat_broadcast_args(const Chat_broadcast_args&);
  Chat_broadcast_args& operator=(const Chat_broadcast_args&);
  Chat_broadcast_args() : login(), text() {
  }

  virtual ~Chat_broadcast_args() throw();
  std::string login;
  std::string text;

  _Chat_broadcast_args__isset __isset;

  void __set_login(const std::string& val);

  void __set_text(const std::string& val);

  bool operator == (const Chat_broadcast_args & rhs) const
  {
    if (!(login == rhs.login))
      return false;
    if (!(text == rhs.text))
      return false;
    return true;
  }
  bool operator != (const Chat_broadcast_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Chat_broadcast_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Chat_broadcast_pargs {
 public:


  virtual ~Chat_broadcast_pargs() throw();
  const std::string* login;
  const std::string* text;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Chat_broadcast_result__isset {
  _Chat_broadcast_result__isset() : ex(false) {}
  bool ex :1;
} _Chat_broadcast_result__isset;

class Chat_broadcast_result {
 public:

  Chat_broadcast_result(const Chat_broadcast_result&);
  Chat_broadcast_result& operator=(const Chat_broadcast_result&);
  Chat_broadcast_result() {
  }

  virtual ~Chat_broadcast_result() throw();
  IsNotAuthorized ex;

  _Chat_broadcast_result__isset __isset;

  void __set_ex(const IsNotAuthorized& val);

  bool operator == (const Chat_broadcast_result & rhs) const
  {
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const Chat_broadcast_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Chat_broadcast_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Chat_broadcast_presult__isset {
  _Chat_broadcast_presult__isset() : ex(false) {}
  bool ex :1;
} _Chat_broadcast_presult__isset;

class Chat_broadcast_presult {
 public:


  virtual ~Chat_broadcast_presult() throw();
  IsNotAuthorized ex;

  _Chat_broadcast_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Chat_users_list_args__isset {
  _Chat_users_list_args__isset() : login(false) {}
  bool login :1;
} _Chat_users_list_args__isset;

class Chat_users_list_args {
 public:

  Chat_users_list_args(const Chat_users_list_args&);
  Chat_users_list_args& operator=(const Chat_users_list_args&);
  Chat_users_list_args() : login() {
  }

  virtual ~Chat_users_list_args() throw();
  std::string login;

  _Chat_users_list_args__isset __isset;

  void __set_login(const std::string& val);

  bool operator == (const Chat_users_list_args & rhs) const
  {
    if (!(login == rhs.login))
      return false;
    return true;
  }
  bool operator != (const Chat_users_list_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Chat_users_list_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Chat_users_list_pargs {
 public:


  virtual ~Chat_users_list_pargs() throw();
  const std::string* login;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Chat_users_list_result__isset {
  _Chat_users_list_result__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _Chat_users_list_result__isset;

class Chat_users_list_result {
 public:

  Chat_users_list_result(const Chat_users_list_result&);
  Chat_users_list_result& operator=(const Chat_users_list_result&);
  Chat_users_list_result() {
  }

  virtual ~Chat_users_list_result() throw();
  std::set<std::string>  success;
  IsNotAuthorized ex;

  _Chat_users_list_result__isset __isset;

  void __set_success(const std::set<std::string> & val);

  void __set_ex(const IsNotAuthorized& val);

  bool operator == (const Chat_users_list_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const Chat_users_list_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Chat_users_list_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Chat_users_list_presult__isset {
  _Chat_users_list_presult__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _Chat_users_list_presult__isset;

class Chat_users_list_presult {
 public:


  virtual ~Chat_users_list_presult() throw();
  std::set<std::string> * success;
  IsNotAuthorized ex;

  _Chat_users_list_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Chat_get_messages_args__isset {
  _Chat_get_messages_args__isset() : login(false), timestamp(false) {}
  bool login :1;
  bool timestamp :1;
} _Chat_get_messages_args__isset;

class Chat_get_messages_args {
 public:

  Chat_get_messages_args(const Chat_get_messages_args&);
  Chat_get_messages_args& operator=(const Chat_get_messages_args&);
  Chat_get_messages_args() : login() {
  }

  virtual ~Chat_get_messages_args() throw();
  std::string login;
  TimeStamp timestamp;

  _Chat_get_messages_args__isset __isset;

  void __set_login(const std::string& val);

  void __set_timestamp(const TimeStamp& val);

  bool operator == (const Chat_get_messages_args & rhs) const
  {
    if (!(login == rhs.login))
      return false;
    if (!(timestamp == rhs.timestamp))
      return false;
    return true;
  }
  bool operator != (const Chat_get_messages_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Chat_get_messages_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Chat_get_messages_pargs {
 public:


  virtual ~Chat_get_messages_pargs() throw();
  const std::string* login;
  const TimeStamp* timestamp;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Chat_get_messages_result__isset {
  _Chat_get_messages_result__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _Chat_get_messages_result__isset;

class Chat_get_messages_result {
 public:

  Chat_get_messages_result(const Chat_get_messages_result&);
  Chat_get_messages_result& operator=(const Chat_get_messages_result&);
  Chat_get_messages_result() {
  }

  virtual ~Chat_get_messages_result() throw();
  std::vector<Message>  success;
  IsNotAuthorized ex;

  _Chat_get_messages_result__isset __isset;

  void __set_success(const std::vector<Message> & val);

  void __set_ex(const IsNotAuthorized& val);

  bool operator == (const Chat_get_messages_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const Chat_get_messages_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Chat_get_messages_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Chat_get_messages_presult__isset {
  _Chat_get_messages_presult__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _Chat_get_messages_presult__isset;

class Chat_get_messages_presult {
 public:


  virtual ~Chat_get_messages_presult() throw();
  std::vector<Message> * success;
  IsNotAuthorized ex;

  _Chat_get_messages_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Chat_disconnect_args__isset {
  _Chat_disconnect_args__isset() : login(false) {}
  bool login :1;
} _Chat_disconnect_args__isset;

class Chat_disconnect_args {
 public:

  Chat_disconnect_args(const Chat_disconnect_args&);
  Chat_disconnect_args& operator=(const Chat_disconnect_args&);
  Chat_disconnect_args() : login() {
  }

  virtual ~Chat_disconnect_args() throw();
  std::string login;

  _Chat_disconnect_args__isset __isset;

  void __set_login(const std::string& val);

  bool operator == (const Chat_disconnect_args & rhs) const
  {
    if (!(login == rhs.login))
      return false;
    return true;
  }
  bool operator != (const Chat_disconnect_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Chat_disconnect_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Chat_disconnect_pargs {
 public:


  virtual ~Chat_disconnect_pargs() throw();
  const std::string* login;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Chat_disconnect_result__isset {
  _Chat_disconnect_result__isset() : ex(false) {}
  bool ex :1;
} _Chat_disconnect_result__isset;

class Chat_disconnect_result {
 public:

  Chat_disconnect_result(const Chat_disconnect_result&);
  Chat_disconnect_result& operator=(const Chat_disconnect_result&);
  Chat_disconnect_result() {
  }

  virtual ~Chat_disconnect_result() throw();
  IsNotAuthorized ex;

  _Chat_disconnect_result__isset __isset;

  void __set_ex(const IsNotAuthorized& val);

  bool operator == (const Chat_disconnect_result & rhs) const
  {
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const Chat_disconnect_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Chat_disconnect_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Chat_disconnect_presult__isset {
  _Chat_disconnect_presult__isset() : ex(false) {}
  bool ex :1;
} _Chat_disconnect_presult__isset;

class Chat_disconnect_presult {
 public:


  virtual ~Chat_disconnect_presult() throw();
  IsNotAuthorized ex;

  _Chat_disconnect_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class ChatClient : virtual public ChatIf {
 public:
  ChatClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  ChatClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void login(const std::string& name);
  void send_login(const std::string& name);
  void recv_login();
  void broadcast(const std::string& login, const std::string& text);
  void send_broadcast(const std::string& login, const std::string& text);
  void recv_broadcast();
  void users_list(std::set<std::string> & _return, const std::string& login);
  void send_users_list(const std::string& login);
  void recv_users_list(std::set<std::string> & _return);
  void get_messages(std::vector<Message> & _return, const std::string& login, const TimeStamp& timestamp);
  void send_get_messages(const std::string& login, const TimeStamp& timestamp);
  void recv_get_messages(std::vector<Message> & _return);
  void disconnect(const std::string& login);
  void send_disconnect(const std::string& login);
  void recv_disconnect();
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class ChatProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<ChatIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (ChatProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_login(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_broadcast(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_users_list(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_messages(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_disconnect(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  ChatProcessor(boost::shared_ptr<ChatIf> iface) :
    iface_(iface) {
    processMap_["login"] = &ChatProcessor::process_login;
    processMap_["broadcast"] = &ChatProcessor::process_broadcast;
    processMap_["users_list"] = &ChatProcessor::process_users_list;
    processMap_["get_messages"] = &ChatProcessor::process_get_messages;
    processMap_["disconnect"] = &ChatProcessor::process_disconnect;
  }

  virtual ~ChatProcessor() {}
};

class ChatProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  ChatProcessorFactory(const ::boost::shared_ptr< ChatIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< ChatIfFactory > handlerFactory_;
};

class ChatMultiface : virtual public ChatIf {
 public:
  ChatMultiface(std::vector<boost::shared_ptr<ChatIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~ChatMultiface() {}
 protected:
  std::vector<boost::shared_ptr<ChatIf> > ifaces_;
  ChatMultiface() {}
  void add(boost::shared_ptr<ChatIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void login(const std::string& name) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->login(name);
    }
    ifaces_[i]->login(name);
  }

  void broadcast(const std::string& login, const std::string& text) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->broadcast(login, text);
    }
    ifaces_[i]->broadcast(login, text);
  }

  void users_list(std::set<std::string> & _return, const std::string& login) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->users_list(_return, login);
    }
    ifaces_[i]->users_list(_return, login);
    return;
  }

  void get_messages(std::vector<Message> & _return, const std::string& login, const TimeStamp& timestamp) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_messages(_return, login, timestamp);
    }
    ifaces_[i]->get_messages(_return, login, timestamp);
    return;
  }

  void disconnect(const std::string& login) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->disconnect(login);
    }
    ifaces_[i]->disconnect(login);
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class ChatConcurrentClient : virtual public ChatIf {
 public:
  ChatConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  ChatConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void login(const std::string& name);
  int32_t send_login(const std::string& name);
  void recv_login(const int32_t seqid);
  void broadcast(const std::string& login, const std::string& text);
  int32_t send_broadcast(const std::string& login, const std::string& text);
  void recv_broadcast(const int32_t seqid);
  void users_list(std::set<std::string> & _return, const std::string& login);
  int32_t send_users_list(const std::string& login);
  void recv_users_list(std::set<std::string> & _return, const int32_t seqid);
  void get_messages(std::vector<Message> & _return, const std::string& login, const TimeStamp& timestamp);
  int32_t send_get_messages(const std::string& login, const TimeStamp& timestamp);
  void recv_get_messages(std::vector<Message> & _return, const int32_t seqid);
  void disconnect(const std::string& login);
  int32_t send_disconnect(const std::string& login);
  void recv_disconnect(const int32_t seqid);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  ::apache::thrift::async::TConcurrentClientSyncInfo sync_;
};

#ifdef _WIN32
  #pragma warning( pop )
#endif

} // namespace

#endif
