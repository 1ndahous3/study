/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef chat_TYPES_H
#define chat_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>


namespace chat {

class TimeStamp;

class Message;

class InvalidLogin;

class IsNotAuthorized;

typedef struct _TimeStamp__isset {
  _TimeStamp__isset() : seconds(false), milliseconds(false) {}
  bool seconds :1;
  bool milliseconds :1;
} _TimeStamp__isset;

class TimeStamp {
 public:

  TimeStamp(const TimeStamp&);
  TimeStamp& operator=(const TimeStamp&);
  TimeStamp() : seconds(0), milliseconds(0) {
  }

  virtual ~TimeStamp() throw();
  int64_t seconds;
  int64_t milliseconds;

  _TimeStamp__isset __isset;

  void __set_seconds(const int64_t val);

  void __set_milliseconds(const int64_t val);

  bool operator == (const TimeStamp & rhs) const
  {
    if (!(seconds == rhs.seconds))
      return false;
    if (!(milliseconds == rhs.milliseconds))
      return false;
    return true;
  }
  bool operator != (const TimeStamp &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TimeStamp & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TimeStamp &a, TimeStamp &b);

inline std::ostream& operator<<(std::ostream& out, const TimeStamp& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _Message__isset {
  _Message__isset() : timestamp(false), login(false), message(false) {}
  bool timestamp :1;
  bool login :1;
  bool message :1;
} _Message__isset;

class Message {
 public:

  Message(const Message&);
  Message& operator=(const Message&);
  Message() : login(), message() {
  }

  virtual ~Message() throw();
  TimeStamp timestamp;
  std::string login;
  std::string message;

  _Message__isset __isset;

  void __set_timestamp(const TimeStamp& val);

  void __set_login(const std::string& val);

  void __set_message(const std::string& val);

  bool operator == (const Message & rhs) const
  {
    if (!(timestamp == rhs.timestamp))
      return false;
    if (!(login == rhs.login))
      return false;
    if (!(message == rhs.message))
      return false;
    return true;
  }
  bool operator != (const Message &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Message & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(Message &a, Message &b);

inline std::ostream& operator<<(std::ostream& out, const Message& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _InvalidLogin__isset {
  _InvalidLogin__isset() : reason(false) {}
  bool reason :1;
} _InvalidLogin__isset;

class InvalidLogin : public ::apache::thrift::TException {
 public:

  InvalidLogin(const InvalidLogin&);
  InvalidLogin& operator=(const InvalidLogin&);
  InvalidLogin() : reason() {
  }

  virtual ~InvalidLogin() throw();
  std::string reason;

  _InvalidLogin__isset __isset;

  void __set_reason(const std::string& val);

  bool operator == (const InvalidLogin & rhs) const
  {
    if (!(reason == rhs.reason))
      return false;
    return true;
  }
  bool operator != (const InvalidLogin &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const InvalidLogin & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
  mutable std::string thriftTExceptionMessageHolder_;
  const char* what() const throw();
};

void swap(InvalidLogin &a, InvalidLogin &b);

inline std::ostream& operator<<(std::ostream& out, const InvalidLogin& obj)
{
  obj.printTo(out);
  return out;
}


class IsNotAuthorized : public ::apache::thrift::TException {
 public:

  IsNotAuthorized(const IsNotAuthorized&);
  IsNotAuthorized& operator=(const IsNotAuthorized&);
  IsNotAuthorized() {
  }

  virtual ~IsNotAuthorized() throw();

  bool operator == (const IsNotAuthorized & /* rhs */) const
  {
    return true;
  }
  bool operator != (const IsNotAuthorized &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IsNotAuthorized & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
  mutable std::string thriftTExceptionMessageHolder_;
  const char* what() const throw();
};

void swap(IsNotAuthorized &a, IsNotAuthorized &b);

inline std::ostream& operator<<(std::ostream& out, const IsNotAuthorized& obj)
{
  obj.printTo(out);
  return out;
}

} // namespace

#endif
